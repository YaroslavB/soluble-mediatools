{
    "docs": [
        {
            "location": "/", 
            "text": "Toolbox for video conversions, transcoding, transmuxing, thumbnailing... wraps around ffmpeg and ffprobe. \n\n\nFeatures\n\n\n\n\nVideo services:\n\n\n\n\n\n\n \nVideo\\ConversionService\n.\n\n\n Transcoding, transmuxing, compression (audio/video)     \n\n\n Video Filters (Chainable filters)      \n\n\n Deinterlace (\nYadifVideoFilter\n)\n\n\n Denoise (\nHqdn3dVideoFilter\n, \nNlmeansVideoFilter\n)\n\n\n Video scaling (todo)\n\n\n\n\n\n\n Video clipping (seekstart - seekend)                  \n\n\n Option to enable multipass transcoding (todo)\n\n\n \nVideo\\InfoService\n \n\n\n Basic information like duration, frames....\n\n\n \nVideo\\ThumbService\n\n\n Basic thumbnail creation\n\n\n \nVideo\\DetectionService\n.\n\n\n Infer/detect \ninterlaced\n \n(BFF, TFF)\n vs \nprogressive\n encoded videos.  \n\n\n\n\nRequirements\n\n\n\n\nPHP 7.1+\n\n\nFFmpeg 3.4+, 4.0+, see \ninstall\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#features", 
            "text": "Video services:      Video\\ConversionService .   Transcoding, transmuxing, compression (audio/video)        Video Filters (Chainable filters)         Deinterlace ( YadifVideoFilter )   Denoise ( Hqdn3dVideoFilter ,  NlmeansVideoFilter )   Video scaling (todo)     Video clipping (seekstart - seekend)                     Option to enable multipass transcoding (todo)    Video\\InfoService     Basic information like duration, frames....    Video\\ThumbService   Basic thumbnail creation    Video\\DetectionService .   Infer/detect  interlaced   (BFF, TFF)  vs  progressive  encoded videos.", 
            "title": "Features"
        }, 
        {
            "location": "/#requirements", 
            "text": "PHP 7.1+  FFmpeg 3.4+, 4.0+, see  install .", 
            "title": "Requirements"
        }, 
        {
            "location": "/video-conversion-service/", 
            "text": "The \nVideo\\Conversionservice\n deals with transcoding, transmuxing...\n\n\nAt a glance\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Config\\FFMpegConfig\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Exception\\ConversionExceptionInterface\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nConversionService\n,\n \nConversionParams\n};\n\n\n\n$vcs\n \n=\n \nnew\n \nConversionService\n(\nnew\n \nFFMpegConfig\n(\n/path/to/ffmpeg\n));\n\n\n\n$params\n \n=\n \n(\nnew\n \nConversionParams\n())\n\n    \n-\nwithVideoCodec\n(\nlibx264\n)\n\n    \n-\nwithStreamable\n(\ntrue\n)\n       \n    \n-\nwithCrf\n(\n24\n);\n                  \n\n\ntry\n \n{\n    \n    \n$vcs\n-\nconvert\n(\n\n        \n/path/inputFile.mov\n,\n \n        \n/path/outputFile.mp4\n,\n \n        \n$params\n\n    \n);\n    \n\n}\n \ncatch\n(\nConversionExceptionInterface\n \n$e\n)\n \n{\n\n    \n// See chapter about exception !!!    \n\n\n}\n\n\n\n\n\nInitialize\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Config\\FFMpegConfig\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\ConversionService\n;\n\n\n\n$vcs\n \n=\n \nnew\n \nConversionService\n(\n    \n    \nnew\n \nFFMpegConfig\n(\n\n        \n$binary\n \n=\n \nffmpeg\n,\n  \n// (?string) - path to ffmpeg binary \n\n        \n$threads\n \n=\n \nnull\n,\n     \n// (?int)    - ffmpeg default threads (null: single-thread)\n\n        \n$timeout\n \n=\n \nnull\n,\n     \n// (?float)  - max time in seconds for ffmpeg process (null: disable) \n\n        \n$idleTimeout\n \n=\n \nnull\n,\n \n// (?float)  - max idle time in seconds for ffmpeg process\n\n        \n$env\n \n=\n \n[]\n            \n// (array)   - additional environment variables               \n\n    \n),\n\n\n    \n$logger\n \n=\n \nnull\n \n// (?\\Psr\\Log\\LoggerInterface) - Default to `\\Psr\\Log\\NullLogger`.  \n\n\n);\n\n\n\n\n\nConversion params\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\ConversionParams\n;\n\n\n\n$params\n \n=\n \n(\nnew\n \nConversionParams\n())\n\n    \n// FFMpeg\n\n    \n-\nwithVideoCodec\n(\nlibx264\n)\n\n    \n-\nwithStreamable\n(\ntrue\n)\n  \n    \n-\nwithCrf\n(\n24\n)\n         \n    \n-\nwithPreset\n(\nfast\n)\n\n    \n-\nwithAudioCodec\n(\naac\n)\n\n    \n-\nwithAudioBitrate\n(\n128k\n);\n            \n\n\n\n\nTip\nConversionParams\n offers an \nimmutable\n interface \n \n \n \u2602\ufe0f\ud83c\udf53\ud83e\udd69\ud83c\udf62\ud83c\udf7b\ud83e\udd3e\u200d\u2642\ufe0f\ud83e\udd4c  \nVideo filters\n\n\nException\n\n\nRecipes\n\n\n\n\nInfo\n\n\nThe following examples assumes that the \nVideo\\ConvertServiceInterface\n \nis already configured \n(generally the services will be available through\na psr-11 compatible container or through framework integration... \nSee \nconfiguration\n section for more info)\n\n\n?php\n\n\nuse\n \nPsr\\Container\\ContainerInterface\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\ConversionServiceInterface\n;\n\n\n/**\n\n\n * @var ContainerInterface         $aPsr11Container \n\n\n * @var ConversionServiceInterface $videoConverter\n\n\n */\n \n\n$videoConverter\n \n=\n \n$aPsr11Container\n-\nget\n(\nConversionServiceInterface\n::\nclass\n);\n\n\n\n\n\n\n\nTranscode to \nmp4/x264/aac\n\n\n\n\nSee the \nofficial H264\n doc. \n\n\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nException\n,\n \nConversionParams\n};\n\n\nuse\n \nSoluble\\MediaTools\\Video\\ConversionServiceInterface\n;\n\n\n\n$params\n \n=\n \n(\nnew\n \nConversionParams\n())\n\n    \n-\nwithVideoCodec\n(\nlibx264\n)\n\n    \n-\nwithAudioCodec\n(\naac\n)\n\n    \n-\nwithAudioBitrate\n(\n128k\n)\n            \n    \n-\nwithStreamable\n(\ntrue\n)\n      \n// Add streamable options (movflags \n faststart) \n\n    \n-\nwithCrf\n(\n24\n)\n               \n// Level of compression: better size / less visual quality  \n\n    \n-\nwithPreset\n(\nfast\n);\n       \n// Optional: see presets           \n\n\n\ntry\n \n{\n\n\n    \n/** @var ConversionServiceInterface $vcs */\n\n\n    \n$vcs\n-\nconvert\n(\n\n        \n/path/inputFile.mov\n,\n \n        \n/path/outputFile.mp4\n,\n \n        \n$params\n\n    \n);\n\n\n\n}\n \ncatch\n(\nException\\ConversionExceptionInterface\n \n$e\n)\n \n{\n\n    \n// See chapters about exception !!! \n\n\n\n}\n\n\n\n\n\nTranscode to \nwebm/vp9/opus\n\n\n\n\nSee the official \nffmpeg VP9 docs\n \nand have a look at the \ngoogle vp9 VOD\n guidelines\n\n\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nException\n,\n \nConversionParams\n};\n\n\nuse\n \nSoluble\\MediaTools\\Video\\ConversionServiceInterface\n;\n\n\n\n$params\n \n=\n \n(\nnew\n \nConversionParams\n())\n\n    \n-\nwithVideoCodec\n(\nlibvpx-vp9\n)\n\n    \n-\nwithVideoBitrate\n(\n750k\n)\n\n    \n-\nwithQuality\n(\ngood\n)\n\n    \n-\nwithCrf\n(\n33\n)\n\n    \n-\nwithAudioCodec\n(\nlibopus\n)\n\n    \n-\nwithAudioBitrate\n(\n128k\n)\n\n    \n/**\n\n\n     * It is recommended to allow up to 240 frames of video between keyframes (8 seconds for 30fps content).\n\n\n     * Keyframes are video frames which are self-sufficient; they don\nt rely upon any other frames to render\n\n\n     * but they tend to be larger than other frame types.\n\n\n     * For web and mobile playback, generous spacing between keyframes allows the encoder to choose the best\n\n\n     * placement of keyframes to maximize quality.\n\n\n     */\n\n    \n-\nwithKeyframeSpacing\n(\n240\n)\n\n    \n// Most of the current VP9 decoders use tile-based, multi-threaded decoding.\n\n    \n// In order for the decoders to take advantage of multiple cores,\n\n    \n// the encoder must set tile-columns and frame-parallel.\n\n    \n-\nwithTileColumns\n(\n2\n)\n\n    \n-\nwithFrameParallel\n(\n1\n)\n\n    \n-\nwithSpeed\n(\n1\n)\n\n    \n// Optional: Use videoprobe to be sure of color conversions if any needed\n\n    \n// -\nwithPixFmt(\nyuv420p\n) \n\n    \n-\nwithOutputFormat\n(\nwebm\n);\n\n\n\n\ntry\n \n{\n\n\n    \n/** @var ConversionServiceInterface $vcs */\n\n\n    \n$vcs\n-\nconvert\n(\n\n        \n/path/inputFile.mov\n,\n \n        \n/path/outputFile.webm\n,\n \n        \n$params\n\n    \n);\n\n\n\n}\n \ncatch\n(\nException\\ConversionExceptionInterface\n \n$e\n)\n \n{\n\n    \n// see chapter about exceptions        \n\n\n}\n \n\n\n\n\nVideo clipping\n\n\n\n\nSee the official \nffmpeg docs\n \n\n\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nException\n,\n \nConversionParams\n,\n \nSeekTime\n};\n\n\n\n$convertParams\n \n=\n \n(\nnew\n \nConversionParams\n)\n\n                \n-\nwithSeekStart\n(\nnew\n \nSeekTime\n(\n10.242\n))\n \n// 10 sec, 242 milli\n\n                \n-\nwithSeekEnd\n(\nSeekTime\n::\ncreateFromHMS\n(\n12:52.015\n));\n \n// 12 mins, 52 secs...                \n\n\n\ntry\n \n{\n\n    \n/** @var \\Soluble\\MediaTools\\Video\\ConversionServiceInterface $videoConverter */\n\n    \n$videoConverter\n-\nconvert\n(\n/path/inputFile.mp4\n,\n \n/path/outputFile.mp4\n,\n \n$convertParams\n);\n\n\n}\n \ncatch\n(\nException\\ConversionExceptionInterface\n \n$e\n)\n \n{\n\n    \n// see chapter about exceptions        \n\n\n}", 
            "title": "VideoConversion"
        }, 
        {
            "location": "/video-conversion-service/#at-a-glance", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ;  use   Soluble\\MediaTools\\Video\\Exception\\ConversionExceptionInterface ;  use   Soluble\\MediaTools\\Video\\ { ConversionService ,   ConversionParams };  $vcs   =   new   ConversionService ( new   FFMpegConfig ( /path/to/ffmpeg ));  $params   =   ( new   ConversionParams ()) \n     - withVideoCodec ( libx264 ) \n     - withStreamable ( true )        \n     - withCrf ( 24 );                    try   {     \n     $vcs - convert ( \n         /path/inputFile.mov ,  \n         /path/outputFile.mp4 ,  \n         $params \n     );      }   catch ( ConversionExceptionInterface   $e )   { \n     // See chapter about exception !!!      }", 
            "title": "At a glance"
        }, 
        {
            "location": "/video-conversion-service/#initialize", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ;  use   Soluble\\MediaTools\\Video\\ConversionService ;  $vcs   =   new   ConversionService (     \n     new   FFMpegConfig ( \n         $binary   =   ffmpeg ,    // (?string) - path to ffmpeg binary  \n         $threads   =   null ,       // (?int)    - ffmpeg default threads (null: single-thread) \n         $timeout   =   null ,       // (?float)  - max time in seconds for ffmpeg process (null: disable)  \n         $idleTimeout   =   null ,   // (?float)  - max idle time in seconds for ffmpeg process \n         $env   =   []              // (array)   - additional environment variables                \n     ), \n\n     $logger   =   null   // (?\\Psr\\Log\\LoggerInterface) - Default to `\\Psr\\Log\\NullLogger`.    );", 
            "title": "Initialize"
        }, 
        {
            "location": "/video-conversion-service/#conversion-params", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\ConversionParams ;  $params   =   ( new   ConversionParams ()) \n     // FFMpeg \n     - withVideoCodec ( libx264 ) \n     - withStreamable ( true )   \n     - withCrf ( 24 )          \n     - withPreset ( fast ) \n     - withAudioCodec ( aac ) \n     - withAudioBitrate ( 128k );               Tip ConversionParams  offers an  immutable  interface     \n \u2602\ufe0f\ud83c\udf53\ud83e\udd69\ud83c\udf62\ud83c\udf7b\ud83e\udd3e\u200d\u2642\ufe0f\ud83e\udd4c", 
            "title": "Conversion params"
        }, 
        {
            "location": "/video-conversion-service/#video-filters", 
            "text": "", 
            "title": "Video filters"
        }, 
        {
            "location": "/video-conversion-service/#exception", 
            "text": "", 
            "title": "Exception"
        }, 
        {
            "location": "/video-conversion-service/#recipes", 
            "text": "Info  The following examples assumes that the  Video\\ConvertServiceInterface  \nis already configured  (generally the services will be available through\na psr-11 compatible container or through framework integration... \nSee  configuration  section for more info)  ?php  use   Psr\\Container\\ContainerInterface ;  use   Soluble\\MediaTools\\Video\\ConversionServiceInterface ;  /**   * @var ContainerInterface         $aPsr11Container    * @var ConversionServiceInterface $videoConverter   */   $videoConverter   =   $aPsr11Container - get ( ConversionServiceInterface :: class );", 
            "title": "Recipes"
        }, 
        {
            "location": "/video-conversion-service/#transcode-to-mp4x264aac", 
            "text": "See the  official H264  doc.    ?php  use   Soluble\\MediaTools\\Video\\ { Exception ,   ConversionParams };  use   Soluble\\MediaTools\\Video\\ConversionServiceInterface ;  $params   =   ( new   ConversionParams ()) \n     - withVideoCodec ( libx264 ) \n     - withAudioCodec ( aac ) \n     - withAudioBitrate ( 128k )             \n     - withStreamable ( true )        // Add streamable options (movflags   faststart)  \n     - withCrf ( 24 )                 // Level of compression: better size / less visual quality   \n     - withPreset ( fast );         // Optional: see presets             try   { \n\n     /** @var ConversionServiceInterface $vcs */ \n\n     $vcs - convert ( \n         /path/inputFile.mov ,  \n         /path/outputFile.mp4 ,  \n         $params \n     );  }   catch ( Exception\\ConversionExceptionInterface   $e )   { \n     // See chapters about exception !!!   }", 
            "title": "Transcode to mp4/x264/aac"
        }, 
        {
            "location": "/video-conversion-service/#transcode-to-webmvp9opus", 
            "text": "See the official  ffmpeg VP9 docs  \nand have a look at the  google vp9 VOD  guidelines   ?php  use   Soluble\\MediaTools\\Video\\ { Exception ,   ConversionParams };  use   Soluble\\MediaTools\\Video\\ConversionServiceInterface ;  $params   =   ( new   ConversionParams ()) \n     - withVideoCodec ( libvpx-vp9 ) \n     - withVideoBitrate ( 750k ) \n     - withQuality ( good ) \n     - withCrf ( 33 ) \n     - withAudioCodec ( libopus ) \n     - withAudioBitrate ( 128k ) \n     /**       * It is recommended to allow up to 240 frames of video between keyframes (8 seconds for 30fps content).       * Keyframes are video frames which are self-sufficient; they don t rely upon any other frames to render       * but they tend to be larger than other frame types.       * For web and mobile playback, generous spacing between keyframes allows the encoder to choose the best       * placement of keyframes to maximize quality.       */ \n     - withKeyframeSpacing ( 240 ) \n     // Most of the current VP9 decoders use tile-based, multi-threaded decoding. \n     // In order for the decoders to take advantage of multiple cores, \n     // the encoder must set tile-columns and frame-parallel. \n     - withTileColumns ( 2 ) \n     - withFrameParallel ( 1 ) \n     - withSpeed ( 1 ) \n     // Optional: Use videoprobe to be sure of color conversions if any needed \n     // - withPixFmt( yuv420p )  \n     - withOutputFormat ( webm );  try   { \n\n     /** @var ConversionServiceInterface $vcs */ \n\n     $vcs - convert ( \n         /path/inputFile.mov ,  \n         /path/outputFile.webm ,  \n         $params \n     );  }   catch ( Exception\\ConversionExceptionInterface   $e )   { \n     // see chapter about exceptions          }", 
            "title": "Transcode to webm/vp9/opus"
        }, 
        {
            "location": "/video-conversion-service/#video-clipping", 
            "text": "See the official  ffmpeg docs     ?php  use   Soluble\\MediaTools\\Video\\ { Exception ,   ConversionParams ,   SeekTime };  $convertParams   =   ( new   ConversionParams ) \n                 - withSeekStart ( new   SeekTime ( 10.242 ))   // 10 sec, 242 milli \n                 - withSeekEnd ( SeekTime :: createFromHMS ( 12:52.015 ));   // 12 mins, 52 secs...                  try   { \n     /** @var \\Soluble\\MediaTools\\Video\\ConversionServiceInterface $videoConverter */ \n     $videoConverter - convert ( /path/inputFile.mp4 ,   /path/outputFile.mp4 ,   $convertParams );  }   catch ( Exception\\ConversionExceptionInterface   $e )   { \n     // see chapter about exceptions          }", 
            "title": "Video clipping"
        }
    ]
}