{
    "docs": [
        {
            "location": "/", 
            "text": "Toolbox for video conversions, transcoding, transmuxing, thumbnailing... wraps around ffmpeg and ffprobe. \n\n\nFeatures\n\n\n\n\nVideo services:\n\n\n\n\n\n\n \nVideo\\ConversionService\n.\n\n\n Transcoding, transmuxing, compression (audio/video)     \n\n\n Video Filters (Chainable filters)      \n\n\n Deinterlace (\nYadifVideoFilter\n)\n\n\n Denoise (\nHqdn3dVideoFilter\n, \nNlmeansVideoFilter\n)\n\n\n Video scaling (todo)\n\n\n\n\n\n\n Video clipping (seekstart - seekend)                  \n\n\n Option to enable multipass transcoding (todo)\n\n\n \nVideo\\InfoService\n \n\n\n Basic information like duration, frames....\n\n\n \nVideo\\ThumbService\n\n\n Basic thumbnail creation\n\n\n \nVideo\\DetectionService\n.\n\n\n Infer/detect \ninterlaced\n \n(BFF, TFF)\n vs \nprogressive\n encoded videos.  \n\n\n\n\nRequirements\n\n\n\n\nPHP 7.1+\n\n\nFFmpeg 3.4+, 4.0+, see \ninstall\n.", 
            "title": "Intro"
        }, 
        {
            "location": "/#features", 
            "text": "Video services:      Video\\ConversionService .   Transcoding, transmuxing, compression (audio/video)        Video Filters (Chainable filters)         Deinterlace ( YadifVideoFilter )   Denoise ( Hqdn3dVideoFilter ,  NlmeansVideoFilter )   Video scaling (todo)     Video clipping (seekstart - seekend)                     Option to enable multipass transcoding (todo)    Video\\InfoService     Basic information like duration, frames....    Video\\ThumbService   Basic thumbnail creation    Video\\DetectionService .   Infer/detect  interlaced   (BFF, TFF)  vs  progressive  encoded videos.", 
            "title": "Features"
        }, 
        {
            "location": "/#requirements", 
            "text": "PHP 7.1+  FFmpeg 3.4+, 4.0+, see  install .", 
            "title": "Requirements"
        }, 
        {
            "location": "/video-info-service/", 
            "text": "At a glance\n\n\nInitialize\n\n\nException\n\n\nRecipes", 
            "title": "Information"
        }, 
        {
            "location": "/video-info-service/#at-a-glance", 
            "text": "", 
            "title": "At a glance"
        }, 
        {
            "location": "/video-info-service/#initialize", 
            "text": "", 
            "title": "Initialize"
        }, 
        {
            "location": "/video-info-service/#exception", 
            "text": "", 
            "title": "Exception"
        }, 
        {
            "location": "/video-info-service/#recipes", 
            "text": "", 
            "title": "Recipes"
        }, 
        {
            "location": "/video-conversion-service/", 
            "text": "The \nVideo\\ConversionService\n acts as a wrapper over ffmpeg and exposes an API\nto help with conversions, video clipping, transcoding. \n\n\nThe system calls to ffmpeg make use of the excellent symfony/process and  \n\n\nAt a glance\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Config\\FFMpegConfig\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Exception\\ConversionExceptionInterface\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nConversionService\n,\n \nConversionParams\n};\n\n\n\n$vcs\n \n=\n \nnew\n \nConversionService\n(\nnew\n \nFFMpegConfig\n(\n/path/to/ffmpeg\n));\n\n\n\n$params\n \n=\n \n(\nnew\n \nConversionParams\n())\n\n    \n-\nwithVideoCodec\n(\nlibx264\n)\n    \n    \n-\nwithStreamable\n(\ntrue\n)\n\n    \n-\nwithCrf\n(\n24\n);\n                  \n\n\ntry\n \n{\n    \n    \n$vcs\n-\nconvert\n(\n\n        \n/path/inputFile.mov\n,\n \n        \n/path/outputFile.mp4\n,\n \n        \n$params\n\n    \n);\n    \n\n}\n \ncatch\n(\nConversionExceptionInterface\n \n$e\n)\n \n{\n\n    \n// See chapter about exception !!!    \n\n\n}\n\n\n\n\n\nInitialize\n\n\nThe \nVideo\\ConversionService\n requires an \nFFMpegConfig\n object as first parameter. This\nis where you set the location of the ffmpeg binary, the number of threads you allow for conversions\nand the various timeouts if needed. The second parameter can be used to inject any psr-3 compatible logger. \n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Config\\\n{\nFFMpegConfig\n,\n \nFFMpegConfigInterface\n};\n\n\nuse\n \nSoluble\\MediaTools\\Video\\ConversionService\n;\n\n\n\n$vcs\n \n=\n \nnew\n \nConversionService\n(\n    \n    \n// @param FFMpegConfigInterface \n\n    \nnew\n \nFFMpegConfig\n(\n\n        \n$binary\n \n=\n \nnull\n,\n      \n// (?string) - path to ffmpeg binary (default: \nffmpeg\n or \nffmpeg.exe\n on Windows)  \n\n        \n$threads\n \n=\n \nnull\n,\n     \n// (?int)    - ffmpeg default threads (null: single-thread)\n\n        \n$timeout\n \n=\n \nnull\n,\n     \n// (?float)  - max time in seconds for ffmpeg process (null: disable) \n\n        \n$idleTimeout\n \n=\n \nnull\n,\n \n// (?float)  - max idle time in seconds for ffmpeg process\n\n        \n$env\n \n=\n \n[]\n            \n// (array)   - additional environment variables               \n\n    \n),\n\n    \n// @param ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`.     \n\n    \n$logger\n \n=\n \nnull\n   \n\n);\n\n\n\n\n\nTip\nIt's a good idea to register services in a container. Depending on available \nframework integrations, you may have a look to the \nVideo\\ConversionServiceFactory\n\nto get a example based on a psr-11 compatible container.\nConversion params\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\ConversionParams\n;\n\n\n\n$params\n \n=\n \n(\nnew\n \nConversionParams\n())\n\n    \n-\nwithVideoCodec\n(\nlibx264\n)\n\n    \n-\nwithStreamable\n(\ntrue\n)\n  \n    \n-\nwithCrf\n(\n24\n)\n         \n    \n-\nwithPreset\n(\nfast\n)\n\n    \n-\nwithAudioCodec\n(\naac\n)\n\n    \n-\nwithAudioBitrate\n(\n128k\n);\n            \n\n\n\n\nWarning\nConversionParams\n exposes an \nimmutable \n style api \n(\n-\nwithXXX()\n, just like PSR-7 and others)\n.\nIt means that the original params are never touched, the \nwithXXX()\n methods always return a copy. \nPlease be aware of it especially if you're used to \nfluent\n interfaces as both exposes chainable methods\nand look similar... your primary reflexes might cause pain: \n?php\n\n\n$params\n \n=\n \n(\nnew\n \nConversionParams\n());\n\n\n\n$newParams\n \n=\n \n$params\n-\nwithVideoCodec\n(\ndate\n(\nY\n)\n \n?\n \nthenexbigcodec\n \n:\n \nlibx264\n)\n\n                    \n-\nwithNoOverwrite\n();\n\n\n\n// The two next lines won\nt use the same params !!!\n\n\n$vcs\n-\nconvert\n(\ni.mov\n,\n \noutput\n,\n \n$params\n);\n \n\n$vcs\n-\nconvert\n(\ni.mov\n,\n \noutput\n,\n \n$newParams\n);\n     \n\n\n\nVideo filters\n\n\ntodo\n\n\nException\n\n\nYou can safely catch exceptions with the generic \nSoluble\\MediaTools\\VideoException\\ConversionExceptionInterface\n,\nalternatively you can also :\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nConversionService\n,\n \nConversionParams\n};\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Exception\n \nas\n \nVE\n;\n\n\n\n/** @var ConversionService $vcs */\n\n\n$params\n \n=\n \n(\nnew\n \nConversionParams\n())\n-\nwithVideoCodec\n(\nxxx\n);\n     \n\ntry\n \n{\n\n\n    \n$vcs\n-\nconvert\n(\ni.mov\n,\n \no.mp4\n,\n \n$params\n);\n\n\n\n// All exception below implements Ve\\ConversionExceptionInterface\n\n\n// It\ns possible to get them all in once\n\n\n\n}\n \ncatch\n(\nVE\\MissingInputFileException\n \n$e\n)\n \n{\n\n\n    \n// \ni.mov does not exists\n\n\n    \necho\n \n$e\n-\ngetMessage\n();\n    \n\n\n}\n \ncatch\n(\n\n\n    \n// The following 3 exeptions are linked to process\n\n    \n// failure \nffmpeg exit code != 0) and implements\n\n    \n//\n\n    \n// - `VE\\ConversionProcessExceptionInterface`\n\n    \n//        (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface)    \n\n    \n//\n\n    \n// in case you want to catch them all-in-once\n\n\n      \nVE\\ProcessFailedException\n       \n    \n|\n \nVE\\ProcessSignaledException\n\n    \n|\n \nVE\\ProcessTimedOutException\n \n$e\n)\n \n\n{\n\n\n    \necho\n \n$e\n-\ngetMessage\n();\n\n\n    \n// Because they implement ProcessExceptionInterface\n\n    \n// we can get a reference to the executed (symfony) process:\n\n\n    \n$process\n \n=\n \n$e\n-\ngetProcess\n();\n\n    \necho\n \n$process\n-\ngetExitCode\n();\n\n    \necho\n \n$process\n-\ngetErrorOutput\n();\n\n\n\n}\n \ncatch\n(\nVE\\ConversionExceptionInterface\n \n$e\n)\n \n{\n\n\n    \n// Other exceptions can be\n\n    \n//\n\n    \n// - VE\\RuntimeException\n\n    \n// - VE\\InvalidParamException (should not happen)\n\n\n}\n\n\n\n\n\nRecipes\n\n\nTranscode to \nmp4/x264/aac\n\n\n\n\nSee the \nofficial H264\n doc. \n\n\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nException\n,\n \nConversionParams\n};\n\n\nuse\n \nSoluble\\MediaTools\\Video\\ConversionServiceInterface\n;\n\n\n\n$params\n \n=\n \n(\nnew\n \nConversionParams\n())\n\n    \n-\nwithVideoCodec\n(\nlibx264\n)\n\n    \n-\nwithAudioCodec\n(\naac\n)\n\n    \n-\nwithAudioBitrate\n(\n128k\n)\n            \n    \n-\nwithStreamable\n(\ntrue\n)\n      \n// Add streamable options (movflags \n faststart) \n\n    \n-\nwithCrf\n(\n24\n)\n               \n// Level of compression: better size / less visual quality  \n\n    \n-\nwithPreset\n(\nfast\n);\n       \n// Optional: see presets           \n\n\n\ntry\n \n{\n\n\n    \n/** @var ConversionServiceInterface $vcs */\n\n\n    \n$vcs\n-\nconvert\n(\n\n        \n/path/inputFile.mov\n,\n \n        \n/path/outputFile.mp4\n,\n \n        \n$params\n\n    \n);\n\n\n\n}\n \ncatch\n(\nException\\ConversionExceptionInterface\n \n$e\n)\n \n{\n\n    \n// See chapters about exception !!! \n\n\n\n}\n\n\n\n\n\nTranscode to \nwebm/vp9/opus\n\n\n\n\nSee the official \nffmpeg VP9 docs\n \nand have a look at the \ngoogle vp9 VOD\n guidelines\n\n\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nException\n,\n \nConversionParams\n};\n\n\nuse\n \nSoluble\\MediaTools\\Video\\ConversionServiceInterface\n;\n\n\n\n$params\n \n=\n \n(\nnew\n \nConversionParams\n())\n\n    \n-\nwithVideoCodec\n(\nlibvpx-vp9\n)\n\n    \n-\nwithVideoBitrate\n(\n750k\n)\n\n    \n-\nwithQuality\n(\ngood\n)\n\n    \n-\nwithCrf\n(\n33\n)\n\n    \n-\nwithAudioCodec\n(\nlibopus\n)\n\n    \n-\nwithAudioBitrate\n(\n128k\n)\n\n    \n/**\n\n\n     * It is recommended to allow up to 240 frames of video between keyframes (8 seconds for 30fps content).\n\n\n     * Keyframes are video frames which are self-sufficient; they don\nt rely upon any other frames to render\n\n\n     * but they tend to be larger than other frame types.\n\n\n     * For web and mobile playback, generous spacing between keyframes allows the encoder to choose the best\n\n\n     * placement of keyframes to maximize quality.\n\n\n     */\n\n    \n-\nwithKeyframeSpacing\n(\n240\n)\n\n    \n// Most of the current VP9 decoders use tile-based, multi-threaded decoding.\n\n    \n// In order for the decoders to take advantage of multiple cores,\n\n    \n// the encoder must set tile-columns and frame-parallel.\n\n    \n-\nwithTileColumns\n(\n2\n)\n\n    \n-\nwithFrameParallel\n(\n1\n)\n\n    \n-\nwithSpeed\n(\n1\n)\n\n    \n// Optional: Use videoprobe to be sure of color conversions if any needed\n\n    \n// -\nwithPixFmt(\nyuv420p\n) \n\n    \n-\nwithOutputFormat\n(\nwebm\n);\n\n\n\n\ntry\n \n{\n\n\n    \n/** @var ConversionServiceInterface $vcs */\n\n\n    \n$vcs\n-\nconvert\n(\n\n        \n/path/inputFile.mov\n,\n \n        \n/path/outputFile.webm\n,\n \n        \n$params\n\n    \n);\n\n\n\n}\n \ncatch\n(\nException\\ConversionExceptionInterface\n \n$e\n)\n \n{\n\n    \n// see chapter about exceptions        \n\n\n}\n \n\n\n\n\nVideo clipping\n\n\n\n\nSee the official \nffmpeg docs\n \n\n\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nException\n,\n \nConversionParams\n,\n \nSeekTime\n};\n\n\n\n$convertParams\n \n=\n \n(\nnew\n \nConversionParams\n)\n\n                \n-\nwithSeekStart\n(\nnew\n \nSeekTime\n(\n10.242\n))\n \n// 10 sec, 242 milli\n\n                \n-\nwithSeekEnd\n(\nSeekTime\n::\ncreateFromHMS\n(\n12:52.015\n));\n \n// 12 mins, 52 secs...                \n\n\n\ntry\n \n{\n\n    \n/** @var \\Soluble\\MediaTools\\Video\\ConversionServiceInterface $videoConverter */\n\n    \n$videoConverter\n-\nconvert\n(\n/path/inputFile.mp4\n,\n \n/path/outputFile.mp4\n,\n \n$convertParams\n);\n\n\n}\n \ncatch\n(\nException\\ConversionExceptionInterface\n \n$e\n)\n \n{\n\n    \n// see chapter about exceptions        \n\n\n}", 
            "title": "Conversion"
        }, 
        {
            "location": "/video-conversion-service/#at-a-glance", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ;  use   Soluble\\MediaTools\\Video\\Exception\\ConversionExceptionInterface ;  use   Soluble\\MediaTools\\Video\\ { ConversionService ,   ConversionParams };  $vcs   =   new   ConversionService ( new   FFMpegConfig ( /path/to/ffmpeg ));  $params   =   ( new   ConversionParams ()) \n     - withVideoCodec ( libx264 )     \n     - withStreamable ( true ) \n     - withCrf ( 24 );                    try   {     \n     $vcs - convert ( \n         /path/inputFile.mov ,  \n         /path/outputFile.mp4 ,  \n         $params \n     );      }   catch ( ConversionExceptionInterface   $e )   { \n     // See chapter about exception !!!      }", 
            "title": "At a glance"
        }, 
        {
            "location": "/video-conversion-service/#initialize", 
            "text": "The  Video\\ConversionService  requires an  FFMpegConfig  object as first parameter. This\nis where you set the location of the ffmpeg binary, the number of threads you allow for conversions\nand the various timeouts if needed. The second parameter can be used to inject any psr-3 compatible logger.   ?php  use   Soluble\\MediaTools\\Video\\Config\\ { FFMpegConfig ,   FFMpegConfigInterface };  use   Soluble\\MediaTools\\Video\\ConversionService ;  $vcs   =   new   ConversionService (     \n     // @param FFMpegConfigInterface  \n     new   FFMpegConfig ( \n         $binary   =   null ,        // (?string) - path to ffmpeg binary (default:  ffmpeg  or  ffmpeg.exe  on Windows)   \n         $threads   =   null ,       // (?int)    - ffmpeg default threads (null: single-thread) \n         $timeout   =   null ,       // (?float)  - max time in seconds for ffmpeg process (null: disable)  \n         $idleTimeout   =   null ,   // (?float)  - max idle time in seconds for ffmpeg process \n         $env   =   []              // (array)   - additional environment variables                \n     ), \n     // @param ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`.      \n     $logger   =   null     );   Tip It's a good idea to register services in a container. Depending on available \nframework integrations, you may have a look to the  Video\\ConversionServiceFactory \nto get a example based on a psr-11 compatible container.", 
            "title": "Initialize"
        }, 
        {
            "location": "/video-conversion-service/#conversion-params", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\ConversionParams ;  $params   =   ( new   ConversionParams ()) \n     - withVideoCodec ( libx264 ) \n     - withStreamable ( true )   \n     - withCrf ( 24 )          \n     - withPreset ( fast ) \n     - withAudioCodec ( aac ) \n     - withAudioBitrate ( 128k );               Warning ConversionParams  exposes an  immutable   style api  ( - withXXX() , just like PSR-7 and others) .\nIt means that the original params are never touched, the  withXXX()  methods always return a copy. \nPlease be aware of it especially if you're used to  fluent  interfaces as both exposes chainable methods\nand look similar... your primary reflexes might cause pain:  ?php  $params   =   ( new   ConversionParams ());  $newParams   =   $params - withVideoCodec ( date ( Y )   ?   thenexbigcodec   :   libx264 ) \n                     - withNoOverwrite ();  // The two next lines won t use the same params !!!  $vcs - convert ( i.mov ,   output ,   $params );   $vcs - convert ( i.mov ,   output ,   $newParams );", 
            "title": "Conversion params"
        }, 
        {
            "location": "/video-conversion-service/#video-filters", 
            "text": "todo", 
            "title": "Video filters"
        }, 
        {
            "location": "/video-conversion-service/#exception", 
            "text": "You can safely catch exceptions with the generic  Soluble\\MediaTools\\VideoException\\ConversionExceptionInterface ,\nalternatively you can also :  ?php  use   Soluble\\MediaTools\\Video\\ { ConversionService ,   ConversionParams };  use   Soluble\\MediaTools\\Video\\Exception   as   VE ;  /** @var ConversionService $vcs */  $params   =   ( new   ConversionParams ()) - withVideoCodec ( xxx );       try   { \n\n     $vcs - convert ( i.mov ,   o.mp4 ,   $params );  // All exception below implements Ve\\ConversionExceptionInterface  // It s possible to get them all in once  }   catch ( VE\\MissingInputFileException   $e )   { \n\n     //  i.mov does not exists \n\n     echo   $e - getMessage ();      }   catch ( \n\n     // The following 3 exeptions are linked to process \n     // failure  ffmpeg exit code != 0) and implements \n     // \n     // - `VE\\ConversionProcessExceptionInterface` \n     //        (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface)     \n     // \n     // in case you want to catch them all-in-once \n\n       VE\\ProcessFailedException        \n     |   VE\\ProcessSignaledException \n     |   VE\\ProcessTimedOutException   $e )   { \n\n     echo   $e - getMessage (); \n\n     // Because they implement ProcessExceptionInterface \n     // we can get a reference to the executed (symfony) process: \n\n     $process   =   $e - getProcess (); \n     echo   $process - getExitCode (); \n     echo   $process - getErrorOutput ();  }   catch ( VE\\ConversionExceptionInterface   $e )   { \n\n     // Other exceptions can be \n     // \n     // - VE\\RuntimeException \n     // - VE\\InvalidParamException (should not happen)  }", 
            "title": "Exception"
        }, 
        {
            "location": "/video-conversion-service/#recipes", 
            "text": "", 
            "title": "Recipes"
        }, 
        {
            "location": "/video-conversion-service/#transcode-to-mp4x264aac", 
            "text": "See the  official H264  doc.    ?php  use   Soluble\\MediaTools\\Video\\ { Exception ,   ConversionParams };  use   Soluble\\MediaTools\\Video\\ConversionServiceInterface ;  $params   =   ( new   ConversionParams ()) \n     - withVideoCodec ( libx264 ) \n     - withAudioCodec ( aac ) \n     - withAudioBitrate ( 128k )             \n     - withStreamable ( true )        // Add streamable options (movflags   faststart)  \n     - withCrf ( 24 )                 // Level of compression: better size / less visual quality   \n     - withPreset ( fast );         // Optional: see presets             try   { \n\n     /** @var ConversionServiceInterface $vcs */ \n\n     $vcs - convert ( \n         /path/inputFile.mov ,  \n         /path/outputFile.mp4 ,  \n         $params \n     );  }   catch ( Exception\\ConversionExceptionInterface   $e )   { \n     // See chapters about exception !!!   }", 
            "title": "Transcode to mp4/x264/aac"
        }, 
        {
            "location": "/video-conversion-service/#transcode-to-webmvp9opus", 
            "text": "See the official  ffmpeg VP9 docs  \nand have a look at the  google vp9 VOD  guidelines   ?php  use   Soluble\\MediaTools\\Video\\ { Exception ,   ConversionParams };  use   Soluble\\MediaTools\\Video\\ConversionServiceInterface ;  $params   =   ( new   ConversionParams ()) \n     - withVideoCodec ( libvpx-vp9 ) \n     - withVideoBitrate ( 750k ) \n     - withQuality ( good ) \n     - withCrf ( 33 ) \n     - withAudioCodec ( libopus ) \n     - withAudioBitrate ( 128k ) \n     /**       * It is recommended to allow up to 240 frames of video between keyframes (8 seconds for 30fps content).       * Keyframes are video frames which are self-sufficient; they don t rely upon any other frames to render       * but they tend to be larger than other frame types.       * For web and mobile playback, generous spacing between keyframes allows the encoder to choose the best       * placement of keyframes to maximize quality.       */ \n     - withKeyframeSpacing ( 240 ) \n     // Most of the current VP9 decoders use tile-based, multi-threaded decoding. \n     // In order for the decoders to take advantage of multiple cores, \n     // the encoder must set tile-columns and frame-parallel. \n     - withTileColumns ( 2 ) \n     - withFrameParallel ( 1 ) \n     - withSpeed ( 1 ) \n     // Optional: Use videoprobe to be sure of color conversions if any needed \n     // - withPixFmt( yuv420p )  \n     - withOutputFormat ( webm );  try   { \n\n     /** @var ConversionServiceInterface $vcs */ \n\n     $vcs - convert ( \n         /path/inputFile.mov ,  \n         /path/outputFile.webm ,  \n         $params \n     );  }   catch ( Exception\\ConversionExceptionInterface   $e )   { \n     // see chapter about exceptions          }", 
            "title": "Transcode to webm/vp9/opus"
        }, 
        {
            "location": "/video-conversion-service/#video-clipping", 
            "text": "See the official  ffmpeg docs     ?php  use   Soluble\\MediaTools\\Video\\ { Exception ,   ConversionParams ,   SeekTime };  $convertParams   =   ( new   ConversionParams ) \n                 - withSeekStart ( new   SeekTime ( 10.242 ))   // 10 sec, 242 milli \n                 - withSeekEnd ( SeekTime :: createFromHMS ( 12:52.015 ));   // 12 mins, 52 secs...                  try   { \n     /** @var \\Soluble\\MediaTools\\Video\\ConversionServiceInterface $videoConverter */ \n     $videoConverter - convert ( /path/inputFile.mp4 ,   /path/outputFile.mp4 ,   $convertParams );  }   catch ( Exception\\ConversionExceptionInterface   $e )   { \n     // see chapter about exceptions          }", 
            "title": "Video clipping"
        }, 
        {
            "location": "/video-thumb-service/", 
            "text": "The \nVideo\\ThumbService\n acts as a wrapper over ffmpeg and\ncurrently allows creation of video thumbnails.  \n\n\nAt a glance\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Config\\FFMpegConfig\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Exception\\ConversionExceptionInterface\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nThumbService\n,\n \nThumbParams\n,\n \nSeekTime\n};\n\n\n\n$vts\n \n=\n \nnew\n \nThumbService\n(\nnew\n \nFFMpegConfig\n(\n/path/to/ffmpeg\n));\n\n\n\n$params\n \n=\n \n(\nnew\n \nThumbParams\n())\n\n    \n-\nwithSeekTime\n(\nnew\n \nSeekTime\n(\n1.25\n));\n\n\n\ntry\n \n{\n    \n    \n$vts\n-\nmakeThumbnail\n(\n\n        \n/path/inputFile.mov\n,\n \n        \n/path/outputFile.jpg\n,\n \n        \n$params\n\n    \n);\n    \n\n}\n \ncatch\n(\nConversionExceptionInterface\n \n$e\n)\n \n{\n\n    \n// See chapter about exception !!!    \n\n\n}\n\n\n\n\n\nInitialize\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Config\\\n{\nFFMpegConfig\n,\n \nFFMpegConfigInterface\n};\n\n\nuse\n \nSoluble\\MediaTools\\Video\\DetectionService\n;\n\n\n\n$vcs\n \n=\n \nnew\n \nDetectionService\n(\n    \n    \n// FFMpegConfigInterface\n\n    \nnew\n \nFFMpegConfig\n(\n\n        \n$binary\n \n=\n \nffmpeg\n,\n  \n// (?string) - path to ffmpeg binary \n\n        \n$threads\n \n=\n \nnull\n,\n     \n// (?int)    - ffmpeg default threads (null: single-thread)\n\n        \n$timeout\n \n=\n \nnull\n,\n     \n// (?float)  - max time in seconds for ffmpeg process (null: disable) \n\n        \n$idleTimeout\n \n=\n \nnull\n,\n \n// (?float)  - max idle time in seconds for ffmpeg process\n\n        \n$env\n \n=\n \n[]\n            \n// (array)   - additional environment variables               \n\n    \n),\n\n    \n// ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`.     \n\n    \n$logger\n \n=\n \nnull\n   \n\n);\n\n\n\n\n\nParams\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nThumbParams\n,\n \nSeekTime\n,\n \nFilter\n};\n\n\n\n$params\n \n=\n \n(\nnew\n \nThumbParams\n())\n\n    \n-\nwithQualityScale\n(\n2\n)\n\n    \n-\nwithSeekTime\n(\nSeekTime\n::\ncreateFromHMS\n(\n0:00:05.123\n))\n\n    \n-\nwithVideoFilter\n(\nnew\n \nFilter\\VideoFilterChain\n([\n\n        \nnew\n \nFilter\\EmptyVideoFilter\n(),\n\n        \nnew\n \nFilter\\YadifVideoFilter\n()\n\n    \n]));\n \n\n\n\n\nWarning\nThumbParams\n exposes an \nimmutable \n style api \n(\n-\nwithXXX()\n, just like PSR-7 and others)\n.\nIt means that the original params are never touched, the \nwithXXX()\n methods always return a copy. \nPlease be aware of it especially if you're used to \nfluent\n interfaces as both exposes chainable methods\nand look similar... your primary reflexes might cause pain: \n?php\n\n\n$params\n \n=\n \n(\nnew\n \nThumbParams\n());\n\n\n\n$newParams\n \n=\n \n$params\n-\nwithSomething\n(\ncool\n)\n\n                    \n-\nwithSomethingElse\n(\ncool\n);\n\n\n\n// The two next lines won\nt use the same params !!!\n\n\n$vts\n-\nconvert\n(\ni.mov\n,\n \noutput\n,\n \n$params\n);\n \n\n$vts\n-\nconvert\n(\ni.mov\n,\n \noutput\n,\n \n$newParams\n);\n     \n\n\n\nVideo filters\n\n\ntodo\n\n\nException\n\n\nYou can safely catch exceptions with the generic \nSoluble\\MediaTools\\VideoException\\ConversionExceptionInterface\n,\nalternatively you can also :\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\\n{\nThumbService\n,\n \nThumbParams\n};\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Exception\n \nas\n \nVE\n;\n\n\n\n/** @var ThumbService $vts */\n\n\n$params\n \n=\n \n(\nnew\n \nThumbParams\n());\n     \n\ntry\n \n{\n\n\n    \n$vts\n-\nmakeThumbnail\n(\ni.mov\n,\n \nout.jpg\n,\n \n$params\n);\n    \n\n\n}\n \ncatch\n(\nVE\\MissingInputFileException\n \n$e\n)\n \n{\n\n\n    \n// \ni.mov does not exists\n\n\n    \necho\n \n$e\n-\ngetMessage\n();\n\n\n\n// All exception below implements Ve\\ConversionExceptionInterface\n\n\n// It\ns possible to get them all in once\n\n\n\n}\n \ncatch\n(\nVE\\MissingTimeException\n \n$e\n)\n \n{\n\n\n    \n// Missing required time\n\n\n    \necho\n \n$e\n-\ngetMessage\n();\n\n\n\n\n}\n \ncatch\n(\n\n\n    \n// The following 3 exeptions are linked to process\n\n    \n// failure \nffmpeg exit code != 0) and implements\n\n    \n//\n\n    \n// - `VE\\ConversionProcessExceptionInterface`\n\n    \n//        (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface)    \n\n    \n//\n\n    \n// in case you want to catch them all-in-once\n\n\n      \nVE\\ProcessFailedException\n       \n    \n|\n \nVE\\ProcessSignaledException\n\n    \n|\n \nVE\\ProcessTimedOutException\n \n$e\n)\n \n\n{\n\n\n    \necho\n \n$e\n-\ngetMessage\n();\n\n\n    \n// Because they implement ProcessExceptionInterface\n\n    \n// we can get a reference to the executed (symfony) process:\n\n\n    \n$process\n \n=\n \n$e\n-\ngetProcess\n();\n\n    \necho\n \n$process\n-\ngetExitCode\n();\n\n    \necho\n \n$process\n-\ngetErrorOutput\n();\n\n\n\n}\n \ncatch\n(\nVE\\ConversionExceptionInterface\n \n$e\n)\n \n{\n\n\n    \n// Other exceptions can be\n\n    \n//\n\n    \n// - VE\\RuntimeException\n\n    \n// - VE\\InvalidParamException (should not happen)\n\n\n}\n\n\n\n\n\nRecipes\n\n\ntodo", 
            "title": "Thumbnailing"
        }, 
        {
            "location": "/video-thumb-service/#at-a-glance", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ;  use   Soluble\\MediaTools\\Video\\Exception\\ConversionExceptionInterface ;  use   Soluble\\MediaTools\\Video\\ { ThumbService ,   ThumbParams ,   SeekTime };  $vts   =   new   ThumbService ( new   FFMpegConfig ( /path/to/ffmpeg ));  $params   =   ( new   ThumbParams ()) \n     - withSeekTime ( new   SeekTime ( 1.25 ));  try   {     \n     $vts - makeThumbnail ( \n         /path/inputFile.mov ,  \n         /path/outputFile.jpg ,  \n         $params \n     );      }   catch ( ConversionExceptionInterface   $e )   { \n     // See chapter about exception !!!      }", 
            "title": "At a glance"
        }, 
        {
            "location": "/video-thumb-service/#initialize", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\Config\\ { FFMpegConfig ,   FFMpegConfigInterface };  use   Soluble\\MediaTools\\Video\\DetectionService ;  $vcs   =   new   DetectionService (     \n     // FFMpegConfigInterface \n     new   FFMpegConfig ( \n         $binary   =   ffmpeg ,    // (?string) - path to ffmpeg binary  \n         $threads   =   null ,       // (?int)    - ffmpeg default threads (null: single-thread) \n         $timeout   =   null ,       // (?float)  - max time in seconds for ffmpeg process (null: disable)  \n         $idleTimeout   =   null ,   // (?float)  - max idle time in seconds for ffmpeg process \n         $env   =   []              // (array)   - additional environment variables                \n     ), \n     // ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`.      \n     $logger   =   null     );", 
            "title": "Initialize"
        }, 
        {
            "location": "/video-thumb-service/#params", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\ { ThumbParams ,   SeekTime ,   Filter };  $params   =   ( new   ThumbParams ()) \n     - withQualityScale ( 2 ) \n     - withSeekTime ( SeekTime :: createFromHMS ( 0:00:05.123 )) \n     - withVideoFilter ( new   Filter\\VideoFilterChain ([ \n         new   Filter\\EmptyVideoFilter (), \n         new   Filter\\YadifVideoFilter () \n     ]));    Warning ThumbParams  exposes an  immutable   style api  ( - withXXX() , just like PSR-7 and others) .\nIt means that the original params are never touched, the  withXXX()  methods always return a copy. \nPlease be aware of it especially if you're used to  fluent  interfaces as both exposes chainable methods\nand look similar... your primary reflexes might cause pain:  ?php  $params   =   ( new   ThumbParams ());  $newParams   =   $params - withSomething ( cool ) \n                     - withSomethingElse ( cool );  // The two next lines won t use the same params !!!  $vts - convert ( i.mov ,   output ,   $params );   $vts - convert ( i.mov ,   output ,   $newParams );", 
            "title": "Params"
        }, 
        {
            "location": "/video-thumb-service/#video-filters", 
            "text": "todo", 
            "title": "Video filters"
        }, 
        {
            "location": "/video-thumb-service/#exception", 
            "text": "You can safely catch exceptions with the generic  Soluble\\MediaTools\\VideoException\\ConversionExceptionInterface ,\nalternatively you can also :  ?php  use   Soluble\\MediaTools\\Video\\ { ThumbService ,   ThumbParams };  use   Soluble\\MediaTools\\Video\\Exception   as   VE ;  /** @var ThumbService $vts */  $params   =   ( new   ThumbParams ());       try   { \n\n     $vts - makeThumbnail ( i.mov ,   out.jpg ,   $params );      }   catch ( VE\\MissingInputFileException   $e )   { \n\n     //  i.mov does not exists \n\n     echo   $e - getMessage ();  // All exception below implements Ve\\ConversionExceptionInterface  // It s possible to get them all in once  }   catch ( VE\\MissingTimeException   $e )   { \n\n     // Missing required time \n\n     echo   $e - getMessage ();  }   catch ( \n\n     // The following 3 exeptions are linked to process \n     // failure  ffmpeg exit code != 0) and implements \n     // \n     // - `VE\\ConversionProcessExceptionInterface` \n     //        (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface)     \n     // \n     // in case you want to catch them all-in-once \n\n       VE\\ProcessFailedException        \n     |   VE\\ProcessSignaledException \n     |   VE\\ProcessTimedOutException   $e )   { \n\n     echo   $e - getMessage (); \n\n     // Because they implement ProcessExceptionInterface \n     // we can get a reference to the executed (symfony) process: \n\n     $process   =   $e - getProcess (); \n     echo   $process - getExitCode (); \n     echo   $process - getErrorOutput ();  }   catch ( VE\\ConversionExceptionInterface   $e )   { \n\n     // Other exceptions can be \n     // \n     // - VE\\RuntimeException \n     // - VE\\InvalidParamException (should not happen)  }", 
            "title": "Exception"
        }, 
        {
            "location": "/video-thumb-service/#recipes", 
            "text": "todo", 
            "title": "Recipes"
        }, 
        {
            "location": "/video-detection-service/", 
            "text": "The \nVideo\\DetectionService\n will analyze a video stream and currently\ndetects/infer interlaced videos. It acts as a wrapper over ffmpeg.   \n\n\nAt a glance\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Config\\FFMpegConfig\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Exception\\DetectionExceptionInterface\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\DetectionService\n;\n\n\n\n$vds\n \n=\n \nnew\n \nDetectionService\n(\nnew\n \nFFMpegConfig\n(\n/path/to/ffmpeg\n));\n\n\n\n\ntry\n \n{\n    \n    \n$interlaceGuess\n \n=\n \n$vds\n-\ndetectInterlacement\n(\n\n        \n/path/input.mov\n,\n\n        \n// Optional:\n\n        \n//   $maxFramesToAnalyze, default: 1000\n\n        \n$maxFramesToAnalyze\n \n=\n \n200\n\n    \n);\n\n\n\n}\n \ncatch\n(\nDetectionExceptionInterface\n \n$e\n)\n \n{\n\n    \n// See chapter about exception !!!    \n\n\n}\n\n\n\n$interlaced\n \n=\n \n$interlaceGuess\n-\nisInterlaced\n(\n\n    \n// Optional: \n\n    \n//  $threshold, default 0.25 (if \n=25% interlaced frames, then true) \n\n    \n0.25\n\n\n);\n\n\n\n\n\nInitialize\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Config\\\n{\nFFMpegConfig\n,\n \nFFMpegConfigInterface\n};\n\n\nuse\n \nSoluble\\MediaTools\\Video\\DetectionService\n;\n\n\n\n$vcs\n \n=\n \nnew\n \nDetectionService\n(\n    \n    \n// FFMpegConfigInterface\n\n    \nnew\n \nFFMpegConfig\n(\n\n        \n$binary\n \n=\n \nffmpeg\n,\n  \n// (?string) - path to ffmpeg binary \n\n        \n$threads\n \n=\n \nnull\n,\n     \n// (?int)    - ffmpeg default threads (null: single-thread)\n\n        \n$timeout\n \n=\n \nnull\n,\n     \n// (?float)  - max time in seconds for ffmpeg process (null: disable) \n\n        \n$idleTimeout\n \n=\n \nnull\n,\n \n// (?float)  - max idle time in seconds for ffmpeg process\n\n        \n$env\n \n=\n \n[]\n            \n// (array)   - additional environment variables               \n\n    \n),\n\n    \n// ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`.     \n\n    \n$logger\n \n=\n \nnull\n   \n\n);\n\n\n\n\n\nException\n\n\n?php\n\n\nuse\n \nSoluble\\MediaTools\\Video\\DetectionService\n;\n\n\nuse\n \nSoluble\\MediaTools\\Video\\Exception\n \nas\n \nVE\n;\n\n\n\n/** @var DetectionService $vds */\n\n\n\ntry\n \n{\n\n    \n$interlaceGuess\n \n=\n \n$vds\n-\ndetectInterlacement\n(\n\n        \n/path/input.mov\n,\n\n    \n);\n\n\n\n}\n \ncatch\n(\nVE\\MissingInputFileException\n \n$e\n)\n \n{\n\n\n    \n// \ni.mov does not exists\n\n\n    \necho\n \n$e\n-\ngetMessage\n();\n\n\n\n}\n \ncatch\n(\n\n\n    \n// The following 3 exeptions are linked to process\n\n    \n// failure \nffmpeg exit code != 0) and implements\n\n    \n//\n\n    \n// - `VE\\ConversionProcessExceptionInterface`\n\n    \n//        (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface)    \n\n    \n//\n\n    \n// in case you want to catch them all-in-once\n\n\n      \nVE\\ProcessFailedException\n       \n    \n|\n \nVE\\ProcessSignaledException\n\n    \n|\n \nVE\\ProcessTimedOutException\n \n$e\n)\n \n\n{\n\n\n    \necho\n \n$e\n-\ngetMessage\n();\n\n\n    \n// Because they implement ProcessExceptionInterface\n\n    \n// we can get a reference to the executed (symfony) process:\n\n\n    \n$process\n \n=\n \n$e\n-\ngetProcess\n();\n\n    \necho\n \n$process\n-\ngetExitCode\n();\n\n    \necho\n \n$process\n-\ngetErrorOutput\n();\n\n\n\n}\n \ncatch\n(\nVE\\ConversionExceptionInterface\n \n$e\n)\n \n{\n\n\n    \n// Other exceptions can be\n\n    \n//\n\n    \n// - VE\\RuntimeException\n\n    \n// - VE\\InvalidParamException (should not happen)\n\n\n}\n\n\n\n\n\nRecipes\n\n\ntodo full example detection + deint + denoise", 
            "title": "Detection"
        }, 
        {
            "location": "/video-detection-service/#at-a-glance", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ;  use   Soluble\\MediaTools\\Video\\Exception\\DetectionExceptionInterface ;  use   Soluble\\MediaTools\\Video\\DetectionService ;  $vds   =   new   DetectionService ( new   FFMpegConfig ( /path/to/ffmpeg ));  try   {     \n     $interlaceGuess   =   $vds - detectInterlacement ( \n         /path/input.mov , \n         // Optional: \n         //   $maxFramesToAnalyze, default: 1000 \n         $maxFramesToAnalyze   =   200 \n     );  }   catch ( DetectionExceptionInterface   $e )   { \n     // See chapter about exception !!!      }  $interlaced   =   $interlaceGuess - isInterlaced ( \n     // Optional:  \n     //  $threshold, default 0.25 (if  =25% interlaced frames, then true)  \n     0.25  );", 
            "title": "At a glance"
        }, 
        {
            "location": "/video-detection-service/#initialize", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\Config\\ { FFMpegConfig ,   FFMpegConfigInterface };  use   Soluble\\MediaTools\\Video\\DetectionService ;  $vcs   =   new   DetectionService (     \n     // FFMpegConfigInterface \n     new   FFMpegConfig ( \n         $binary   =   ffmpeg ,    // (?string) - path to ffmpeg binary  \n         $threads   =   null ,       // (?int)    - ffmpeg default threads (null: single-thread) \n         $timeout   =   null ,       // (?float)  - max time in seconds for ffmpeg process (null: disable)  \n         $idleTimeout   =   null ,   // (?float)  - max idle time in seconds for ffmpeg process \n         $env   =   []              // (array)   - additional environment variables                \n     ), \n     // ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`.      \n     $logger   =   null     );", 
            "title": "Initialize"
        }, 
        {
            "location": "/video-detection-service/#exception", 
            "text": "?php  use   Soluble\\MediaTools\\Video\\DetectionService ;  use   Soluble\\MediaTools\\Video\\Exception   as   VE ;  /** @var DetectionService $vds */  try   { \n     $interlaceGuess   =   $vds - detectInterlacement ( \n         /path/input.mov , \n     );  }   catch ( VE\\MissingInputFileException   $e )   { \n\n     //  i.mov does not exists \n\n     echo   $e - getMessage ();  }   catch ( \n\n     // The following 3 exeptions are linked to process \n     // failure  ffmpeg exit code != 0) and implements \n     // \n     // - `VE\\ConversionProcessExceptionInterface` \n     //        (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface)     \n     // \n     // in case you want to catch them all-in-once \n\n       VE\\ProcessFailedException        \n     |   VE\\ProcessSignaledException \n     |   VE\\ProcessTimedOutException   $e )   { \n\n     echo   $e - getMessage (); \n\n     // Because they implement ProcessExceptionInterface \n     // we can get a reference to the executed (symfony) process: \n\n     $process   =   $e - getProcess (); \n     echo   $process - getExitCode (); \n     echo   $process - getErrorOutput ();  }   catch ( VE\\ConversionExceptionInterface   $e )   { \n\n     // Other exceptions can be \n     // \n     // - VE\\RuntimeException \n     // - VE\\InvalidParamException (should not happen)  }", 
            "title": "Exception"
        }, 
        {
            "location": "/video-detection-service/#recipes", 
            "text": "todo full example detection + deint + denoise", 
            "title": "Recipes"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\nThe MIT License (MIT)\n\n\nCopyright \n 2018 Vanvelthem S\u00e9bastien\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#license", 
            "text": "The MIT License (MIT)  Copyright   2018 Vanvelthem S\u00e9bastien  Permission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}